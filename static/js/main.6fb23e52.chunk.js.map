{"version":3,"sources":["fbInstance.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Profile","refreshUser","userObj","history","useHistory","displayName","newDisplayName","setNewDisplayName","onLogOutClick","window","confirm","signOut","push","updateProfile","photoURL","autoFocus","marginTop","Tweet","tweetObj","isOwner","edit","setEdit","text","newTweet","setNewTweet","onDeleteClick","doc","id","delete","refFromURL","attachmentUrl","toggleEdit","update","src","alt","faTrash","faPencilAlt","TweetFactory","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","minLength","maxLength","htmlFor","faPlus","accpet","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","from","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fb23e52.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n  // 환경변수를 지정해줍니다.\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\n\nexport const dbService = firebase.firestore();\n\nexport const storageService = firebase.storage();","import { authService } from 'fbInstance';\nimport React, { useState } from 'react';\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (e) => {\n    const {\n      target: { name, value },\n    } = e;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"이메일 주소를 입력하세요\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"비밀번호를 입력하세요\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"계정 생성하기\" : \"기존 계정으로 로그인\"}\n          className=\"authInput authSubmit\"\n        />\n        {error && <span className=\"authError\">{error}</span>}\n        <span onClick={toggleAccount} className=\"authSwitch\">\n          {newAccount ? \"기존 계정으로 로그인 하시겠습니까?\" : \"계정을 생성하시겠습니까?\"}\n        </span>\n      </form> \n    </>\n  )\n};\n\nexport default AuthForm","import React from \"react\";\nimport { authService, firebaseInstance } from \"../fbInstance\";\nimport AuthForm from \"components/AuthForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  const onSocialClick = async (e) => {\n    const {\n      target: { name },\n    } = e;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    await authService.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <div className=\"authContainer\">\n        <FontAwesomeIcon\n          icon={faTwitter}\n          color={\"#04AAFF\"}\n          size=\"3x\"\n          style={{ marginBottom: 30 }}\n        />\n        <AuthForm />\n        <div className=\"authBtns\">\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n            Google 계정으로 로그인 <FontAwesomeIcon icon={faGoogle} />\n          </button>\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n            Github 계정으로 로그인 <FontAwesomeIcon icon={faGithub} />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport { authService } from \"fbInstance\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = async () => {\n    const okay = window.confirm(\"로그아웃 하시겠습니까?\");\n    if (okay) {\n      await authService.signOut();\n      history.push(\"/\");\n    };\n  };\n  // const getMyTweet = async () => {\n  //   const tweets = await dbService\n  //     .collection(\"tweets\")\n  //     .where(\"creatorId\", \"==\", userObj.uid)\n  //     .orderBy(\"createdAt\", \"desc\")\n  //     .get();\n  //   console.log(tweets.docs.map((doc) => doc.data()));\n  // };\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewDisplayName(value);\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n        photoURL: \"\"\n      });\n      refreshUser();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"닉네임을 입력하세요\"\n          value={newDisplayName}\n          autoFocus\n          className=\"formInput\"\n        />\n        <input type=\"submit\" value=\"프로필 업데이트\" className=\"formBtn\" style={{ marginTop: 10 }}/>\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>로그아웃</span>\n    </div>\n  );\n};\n\nexport default Profile;\n\n/* useHistory를 사용할 때\n * const history = useHistory();\n * onLogOutClick 함수 스코프에 다음과 같이 선언\n * const onLogOutClick = () => {\n *  authService.signOut();\n *  history.push(\"/\");\n * }\n */\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbInstance\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n  const [edit, setEdit] = useState(false);\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\n  const onDeleteClick = async () => {\n    const okay = window.confirm(\"이 트윗을 삭제하시겠습니까\");\n    if (okay) {\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEdit = () => setEdit((prev) => !prev);\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\n      text: newTweet,\n    });\n    setEdit(false);\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewTweet(value);\n  };\n  return (\n    <div className=\"tweet\">\n      {edit ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container tweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"트윗을 편집하세요\"\n              value={newTweet}\n              onChange={onChange}\n              required\n              autoFocus\n            />\n            <input type=\"submit\" value=\"업데이트 하기\" className=\"formBtn\" />\n          </form>\n          <button onClick={toggleEdit} className=\"formBtn cancelBtn\">닫기</button>\n        </>\n      ) : (\n        <>\n          <h4>{tweetObj.text}</h4>\n          {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} alt=\"upload\" />}\n          {isOwner && (\n            <div className=\"tweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEdit}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tweet;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbInstance\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({ userObj }) => {\n  const [tweet, setTweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (tweet === \"\") {\n      return;\n    }\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const tweetObj = {\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"tweets\").add(tweetObj);\n    setTweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setTweet(value);\n  };\n  const onFlieChange = (e) => {\n    const {\n      target: { files },\n    } = e;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n  };\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n          <input\n            value={tweet}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"당신의 소중한 순간을 기록하세요.\"\n            minLength={5}\n            maxLength={120}\n            className=\"factoryInput__input\"\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n        <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n          <span>사진 추가하기</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accpet=\"image/*\"\n          onChange={onFlieChange}\n          style={{\n            opacity: 0,\n          }}\n        />\n        {attachment && (\n          <div className=\"factoryForm__attachment\">\n            <img\n              src={attachment}\n              style={{ backgroundImage: attachment }}\n              alt=\"upload_image\"\n            />\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n              <span>삭제</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default TweetFactory;\n","import React, { useEffect, useState } from \"react\";\nimport Tweet from \"components/Tweet\";\nimport { dbService } from \"fbInstance\";\nimport TweetFactory from \"components/TweetFactory\";\n\nconst Home = ({ userObj }) => {\n\n  const [tweets, setTweets] = useState([]);\n\n  useEffect(() => {\n    dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n      const tweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setTweets(tweetArray);\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <TweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {tweets.map((tweet) => (\n          <Tweet\n            key={tweet.id}\n            tweetObj={tweet}\n            isOwner={tweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-regular-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li>\n        <Link to=\"/\" style={{ marginRight: 10 }}>\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n        </Link>\n      </li>\n      <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj !== null ? `${userObj.displayName}의 Profile` : \"Profile\"}\n          </span>\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Profile from \"../routes/Profile\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: \"100%\",\n              margin: \"0 auto\",\n              marginTop: 80,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </div>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n            <Redirect from=\"*\" to=\"/\" />\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbInstance\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  // 객체에서 필요한 정보만 가져와줌(신속한 렌더링)\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={isLoggedIn}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer>\n        <div className=\"footer__section\">\n          &copy; {new Date().getFullYear()} Twitter\n        </div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}